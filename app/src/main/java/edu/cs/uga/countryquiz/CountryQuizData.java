package edu.cs.uga.countryquiz;

import android.content.ContentValues;
import android.content.Context;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.opencsv.CSVReader;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static android.content.ContentValues.TAG;

public class CountryQuizData {
    public static final String DEBUG_TAG = "CountryQuizData";
    public static final String DB_NAME = "countryquiz.db";

    //this is a reference to our database; it is used later to run SQL commands
    private SQLiteDatabase db;
    private SQLiteOpenHelper countryQuizDbHelper;
    private static final String[] allCountriesTableColumns = {
            CountryQuizDBHelper.COUNTRIES_COLUMN_ID,
            CountryQuizDBHelper.COUNTRIES_COLUMN_COUNTRY,
            CountryQuizDBHelper.COUNTRIES_COLUMN_CONTINENT
    };
    private static final String[] allQuizzesTableColumns = {
            CountryQuizDBHelper.QUIZZES_COLUMN_ID,
            CountryQuizDBHelper.QUIZZES_COLUMN_DATE,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION1,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION2,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION3,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION4,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION5,
            CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION6,
            CountryQuizDBHelper.QUIZZES_COLUMN_RESULT
    };

    public CountryQuizData(Context context) {
        this.countryQuizDbHelper = CountryQuizDBHelper.getInstance(context);
    }

    public void open() {
        db = countryQuizDbHelper.getWritableDatabase();
        Log.d( DEBUG_TAG, "CountryQuizData: db open" );
    }

    public void close() {
        if(countryQuizDbHelper != null) {
            countryQuizDbHelper.close();
            Log.d( DEBUG_TAG, "CountryQuizData: db close" );
        }
    }

    public void storeCountries(Resources res) {
        Cursor cursor = null;

        try {
            cursor = db.query(CountryQuizDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
                    null, null, null, null, null);

            //put selected country into the List
            if (cursor.getCount() <= 0) {
                Log.d( DEBUG_TAG, "CountryQuizData: inserting CSV data" );
                InputStream in_s = res.openRawResource(R.raw.country_continent);

                //read the CSV data
                CSVReader reader = new CSVReader(new InputStreamReader(in_s));
                String[] nextLine;
                while ((nextLine = reader.readNext()) != null) {
                    ContentValues values = new ContentValues();
                    values.put(CountryQuizDBHelper.COUNTRIES_COLUMN_COUNTRY, nextLine[1]);
                    values.put(CountryQuizDBHelper.COUNTRIES_COLUMN_CONTINENT, nextLine[2]);

                    //Insert the new row into the database table; the id (primary key) will be
                    //automatically generated by the database system
                    long id = db.insert(CountryQuizDBHelper.TABLE_COUNTRIES, null, values);
                }
            } else {
                Log.d( DEBUG_TAG, "CountryQuizData: database has been initialized already");
            }
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
    }

    public Quiz storeQuiz(Quiz quiz) {
        ContentValues values = new ContentValues();
        values.put(CountryQuizDBHelper.QUIZZES_COLUMN_DATE, quiz.getDate());
        values.put(CountryQuizDBHelper.QUIZZES_COLUMN_RESULT, quiz.getResult());
        List<String> questions = quiz.getQuestions();
        int numQuestionsAvailable = questions.size();
        if(numQuestionsAvailable > 0 && questions.get(0) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION1, questions.get(0));
        }
        if(numQuestionsAvailable > 1 && questions.get(1) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION2, questions.get(1));
        }
        if(numQuestionsAvailable > 2 && questions.get(2) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION3, questions.get(2));
        }
        if(numQuestionsAvailable > 3 && questions.get(3) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION4, questions.get(3));
        }
        if(numQuestionsAvailable > 4 && questions.get(4) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION5, questions.get(4));
        }
        if(numQuestionsAvailable > 5 && questions.get(5) != null){
            values.put(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION6, questions.get(5));
        }

        //Insert the new row into the database table; the id (primary key) will be
        //automatically generated by the database system
        long id = db.insert(CountryQuizDBHelper.TABLE_QUIZZES, null, values);

        //store the id in the Country instance, as it is now persistent
        quiz.setId(id);

        return quiz;
    }

    public List<Country> retrieveCountriesForQuiz() {
        ArrayList<Country> countriesForQuiz = new ArrayList<>();
        ArrayList<Integer> randomIntegers = new ArrayList<>();
        Cursor cursor = null;

        while (countriesForQuiz.size() != 6) {
            Random rand = new Random();
            int randomInt = rand.nextInt(195) + 1;

            if(randomIntegers.contains(randomInt)){
                continue;
            }
            randomIntegers.add(randomInt);

            String selection = CountryQuizDBHelper.COUNTRIES_COLUMN_ID + " = ?";
            String[] selectionArgs = new String[]{
                    randomInt + ""
            };

            try {
                //Execute the select query and get the Cursor to iterate over the retrieved rows
                cursor = db.query(CountryQuizDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
                        selection, selectionArgs, null, null, null);

                //put selected country into the List
                if (cursor.getCount() > 0) {
                    while (cursor.moveToNext()) {
                        //get all attribute values of this country
                        long id = cursor.getLong(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_ID));
                        String country = cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_COUNTRY));
                        String continent = cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_CONTINENT));

                        //create a new country object and set its state to the retrieved values
                        Country countryObject = new Country(country, continent);
                        countryObject.setId(id);
                        //add it to the list
                        countriesForQuiz.add(countryObject);
                        Log.d(DEBUG_TAG, "Retrieved Countries: " + countryObject);
                    }
                }
            } catch (Exception e) {
                Log.d(DEBUG_TAG, "Exception caught: " + e);
            } finally {
                //we should close the cursor
                if (cursor != null) {
                    cursor.close();
                }
            }
        }

        return countriesForQuiz;
    }

    public List<Country> retrieveAllCountries() {
        ArrayList<Country> countries = new ArrayList<>();
        Cursor cursor = null;

        try {
            //Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query(CountryQuizDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
                    null, null, null, null, null);

            //collect all countries into a List
            if (cursor.getCount() > 0) {
                while (cursor.moveToNext()) {
                    //get all attribute values of this country
                    long id = cursor.getLong(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_ID));
                    String country = cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_COUNTRY));
                    String continent = cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.COUNTRIES_COLUMN_CONTINENT));

                    //create a new country object and set its state to the retrieved values
                    Country countryObject = new Country(country, continent);
                    countryObject.setId(id);
                    //add it to the list
                    countries.add(countryObject);
                    Log.d(DEBUG_TAG, "Retrieved Countries: " + countryObject);
                }
            }
            Log.d(DEBUG_TAG, "Number of records from DB: " + cursor.getCount());
        }
        catch(Exception e) {
            Log.d(DEBUG_TAG, "Exception caught: " + e);
        }
        finally{
            //we should close the cursor
            if(cursor != null) {
                cursor.close();
            }
        }
        //return a list of retrieved countries
        return countries;
    }

    public ArrayList<Quiz> retrieveAllQuizzes() {
        ArrayList<Quiz> quizzes = new ArrayList<>();
        Cursor cursor = null;

        try {
            //Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query(CountryQuizDBHelper.TABLE_QUIZZES, allQuizzesTableColumns,
                    null, null, null, null, null);

            //collect all countries into a List
            if (cursor.getCount() > 0) {
                while (cursor.moveToNext()) {
                    //get all attribute values of this country
                    long id = cursor.getLong(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_ID));
                    String date = cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_DATE));
                    int result = cursor.getInt(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_RESULT));
                    List<String> questions = new ArrayList<>();
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION1)));
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION2)));
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION3)));
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION4)));
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION5)));
                    questions.add(cursor.getString(cursor.getColumnIndex(CountryQuizDBHelper.QUIZZES_COLUMN_QUESTION6)));

                    //create a new country object and set its state to the retrieved values
                    Quiz quizObject = new Quiz(date, questions, result);
                    quizObject.setId(id);
                    //add it to the list
                    quizzes.add(quizObject);
                    Log.d(DEBUG_TAG, "Retrieved Countries: " + quizObject);
                }
            }
            Log.d(DEBUG_TAG, "Number of records from DB: " + cursor.getCount());
        }
        catch(Exception e) {
            Log.d(DEBUG_TAG, "Exception caught: " + e);
        }
        finally{
            //we should close the cursor
            if(cursor != null) {
                cursor.close();
            }
        }
        //return a list of retrieved quizzes
        return quizzes;
    }


}
